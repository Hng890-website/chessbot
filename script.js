// ===========================================
// MOVE HISTORY LOGIC (ƒê√É S·ª¨A ƒê·ªÇ HI·ªÇN TH·ªä C·∫∂P N∆Ø·ªöC ƒêI)
// ===========================================

const moveHistoryListEl = document.getElementById('move-history-list');

// H√†m t·∫°o m√¥ t·∫£ ƒë∆°n gi·∫£n
function createMoveDescription(move) {
    const pieceMap = {
        'p': 'qu√¢n t·ªët', 'n': 'qu√¢n m√£', 'b': 'qu√¢n t∆∞·ª£ng', 
        'r': 'qu√¢n xe', 'q': 'qu√¢n h·∫≠u', 'k': 'qu√¢n vua'
    };
    const pieceName = pieceMap[move.piece] || 'qu√¢n c·ªù';
    const action = move.captured ? `b·∫Øt qu√¢n t·∫°i ${move.to}` : `ƒëi l√™n ${move.to}`;
    const icon = move.captured ? 'üí•' : '‚¨ÜÔ∏è';
    
    return {
        text: `${move.color === playerColor ? 'B·∫°n' : 'Bot'} ƒë√£ ƒëi ${pieceName} ${action}`,
        icon: icon
    };
}

/**
 * QUAN TR·ªåNG: C·∫≠p nh·∫≠t h√†m n√†y ƒë·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠ theo c·∫∑p c·ªôt (Tr·∫Øng | ƒêen).
 */
function updateMoveHistory(newMove = null) {
    const history = game.history({ verbose: true });
    
    if (moveHistoryListEl) {
         moveHistoryListEl.innerHTML = '';
    }
   
    const noMovesMessageEl = document.querySelector('.no-moves-message');
    
    // Ki·ªÉm tra noMovesMessageEl tr∆∞·ªõc khi truy c·∫≠p style
    if (noMovesMessageEl) {
        noMovesMessageEl.style.display = history.length === 0 ? 'block' : 'none';
    }


    if (history.length === 0 || !moveHistoryListEl) return;

    let historyHTML = '';
    
    // Duy·ªát qua l·ªãch s·ª≠ theo t·ª´ng c·∫∑p n∆∞·ªõc ƒëi (Tr·∫Øng v√† ƒêen)
    for (let i = 0; i < history.length; i += 2) {
        const whiteMove = history[i];
        const blackMove = history[i + 1];
        const moveNumber = Math.floor(i / 2) + 1;

        // Chu·∫©n h√≥a ƒë·ªãnh d·∫°ng n∆∞·ªõc ƒëi (SAN)
        const formatMove = (move) => {
            if (!move) return '';
            let displayMove = move.san;
            if (move.promotion) {
                displayMove += `=${move.promotion.toUpperCase()}`;
            }
            if (move.checkmate) {
                displayMove += '#';
            } else if (move.check) {
                displayMove += '+';
            }
            return displayMove;
        };
        
        const whiteMoveSAN = formatMove(whiteMove);
        const blackMoveSAN = formatMove(blackMove);
        
        // --- X√¢y d·ª±ng HTML cho c·∫∑p n∆∞·ªõc ƒëi ---
        
        // 1. C·ªôt Tr·∫Øng (Ng∆∞·ªùi ch∆°i)
        const whiteContent = whiteMove 
            ? `<div class="move-detail-col">
                <span class="move-white">${whiteMoveSAN}</span>
              </div>` 
            : '';

        // 2. C·ªôt ƒêen (Bot)
        const blackContent = blackMove 
            ? `<div class="move-detail-col">
                <span class="move-black">${blackMoveSAN}</span>
              </div>` 
            : '';

        // 3. T·ªïng h·ª£p h√†ng
        historyHTML += `
            <div class="move-item-row" data-move-num="${moveNumber}">
                <div class="move-number-col">
                    <span class="move-number">${moveNumber}.</span>
                </div>
                ${whiteContent}
                ${blackContent}
            </div>`;
    }

    // Ch√®n HTML ƒë√£ t·∫°o v√†o list (Hi·ªÉn th·ªã m·ªõi nh·∫•t ·ªü tr√™n c√πng)
    moveHistoryListEl.innerHTML = historyHTML;
    
    // C·∫≠p nh·∫≠t c·∫•p ƒë·ªô bot trong b·∫£ng ph√¢n t√≠ch
    const botLevelAnalysisEl = document.getElementById('bot-level-analysis');
    if (botLevelAnalysisEl) {
        botLevelAnalysisEl.textContent = botLevel;
    }
    
    // Cu·ªôn xu·ªëng cu·ªëi (c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt n·∫øu d√πng insertAdjacentHTML, 
    // nh∆∞ng ƒë·ªÉ an to√†n khi d√πng innerHTML)
    moveHistoryListEl.scrollTop = moveHistoryListEl.scrollHeight;
    
    // CH√ö √ù: B·ªï sung logic hi·ªÉn th·ªã m√¥ t·∫£ chi ti·∫øt cho n∆∞·ªõc ƒëi cu·ªëi c√πng
    // (L·∫•y n∆∞·ªõc ƒëi cu·ªëi c√πng)
    const lastMove = history[history.length - 1];
    if (lastMove) {
        const lastMoveEl = moveHistoryListEl.querySelector(`.move-item-row[data-move-num="${Math.ceil(history.length / 2)}"]`);
        if (lastMoveEl) {
            const description = createMoveDescription(lastMove);
            const targetCol = lastMove.color === 'w' 
                ? lastMoveEl.querySelector('.move-detail-col:nth-child(2)') // C·ªôt Tr·∫Øng
                : lastMoveEl.querySelector('.move-detail-col:nth-child(3)'); // C·ªôt ƒêen
            
            if (targetCol) {
                const descHTML = `
                    <div class="move-description">
                        <span class="desc-icon">${description.icon}</span>
                        ${description.text}
                    </div>`;
                targetCol.insertAdjacentHTML('beforeend', descHTML);
            }
        }
    }
}
