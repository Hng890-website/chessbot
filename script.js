// script.js

// --- GLOBAL VARIABLES ---
let selectedBotLevel = 1;
let selectedBotColor = "Tr·∫Øng"; // M·∫∑c ƒë·ªãnh l√† Tr·∫Øng
let game = null; // Bi·∫øn l∆∞u tr·ªØ tr·∫°ng th√°i game t·ª´ th∆∞ vi·ªán Chess.js
let selectedSquare = null; // Bi·∫øn l∆∞u tr·ªØ √¥ c·ªù ƒëang ƒë∆∞·ª£c ch·ªçn
const SQUARE_SIZE = 60; // K√≠ch th∆∞·ªõc m·ªói √¥ c·ªù (ph·∫£i kh·ªõp v·ªõi CSS)

// --- TIMER VARIABLES ---
const INITIAL_TIME_SECONDS = 300; // 5 ph√∫t
let whiteTime = INITIAL_TIME_SECONDS;
let blackTime = INITIAL_TIME_SECONDS;
let timerInterval = null;

// --- UTILITY FUNCTIONS ---

/**
 * Chuy·ªÉn ƒë·ªïi ch·ªâ m·ª•c m·∫£ng (0-63) th√†nh t·ªça ƒë·ªô c·ªù vua (a1-h8).
 * @param {number} index Ch·ªâ m·ª•c t·ª´ 0 ƒë·∫øn 63.
 * @returns {string} T·ªça ƒë·ªô c·ªù vua.
 */
function indexToSquare(index) {
    const file = String.fromCharCode('a'.charCodeAt(0) + (index % 8));
    const rank = 8 - Math.floor(index / 8);
    return file + rank;
}

/**
 * Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô c·ªù vua (a1-h8) th√†nh ch·ªâ m·ª•c m·∫£ng (0-63).
 * @param {string} square T·ªça ƒë·ªô c·ªù vua.
 * @returns {number} Ch·ªâ m·ª•c m·∫£ng.
 */
function squareToIndex(square) {
    const file = square.charCodeAt(0) - 'a'.charCodeAt(0);
    const rank = 8 - parseInt(square[1]);
    return rank * 8 + file;
}

/**
 * ƒê·ªãnh d·∫°ng th·ªùi gian (gi√¢y) th√†nh chu·ªói MM:SS.
 * @param {number} seconds T·ªïng s·ªë gi√¢y.
 * @returns {string} Chu·ªói th·ªùi gian ƒë√£ ƒë·ªãnh d·∫°ng.
 */
function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    const formattedMinutes = String(minutes).padStart(2, '0');
    const formattedSeconds = String(remainingSeconds).padStart(2, '0');
    return `${formattedMinutes}:${formattedSeconds}`;
}

// --- TIMER LOGIC ---

/**
 * C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian v√† ki·ªÉm tra c·ªù h·∫øt gi·ªù.
 */
function updateTimer() {
    if (!game) return;
    
    const turn = game.turn();
    const activeTimeId = turn === 'w' ? 'white-time' : 'black-time';
    const activeClockId = turn === 'w' ? 'white-clock' : 'black-clock';
    
    if (turn === 'w') {
        whiteTime--;
        if (whiteTime < 0) {
            handleTimeout('w');
            return;
        }
    } else {
        blackTime--;
        if (blackTime < 0) {
            handleTimeout('b');
            return;
        }
    }

    const timeElement = document.getElementById(activeTimeId);
    if (timeElement) {
        timeElement.textContent = formatTime(turn === 'w' ? whiteTime : blackTime);
        
        // Hi·ªáu ·ª©ng c·∫£nh b√°o th·ªùi gian th·∫•p (d∆∞·ªõi 10 gi√¢y)
        const activeTime = turn === 'w' ? whiteTime : blackTime;
        const activeClock = document.getElementById(activeClockId);
        
        if (activeTime <= 10 && activeTime >= 0) {
            activeClock.classList.add('low-time');
        } else {
            activeClock.classList.remove('low-time');
        }
    }
}

/**
 * B·∫Øt ƒë·∫ßu ƒë·ªìng h·ªì cho l∆∞·ª£t ch∆°i hi·ªán t·∫°i.
 */
function startTimer() {
    if (timerInterval) clearInterval(timerInterval);
    if (!game || game.game_over()) return;

    timerInterval = setInterval(updateTimer, 1000);
    
    // ƒê√°nh d·∫•u ƒë·ªìng h·ªì ƒëang ch·∫°y
    document.getElementById('white-clock').classList.remove('active');
    document.getElementById('black-clock').classList.remove('active');
    if (game.turn() === 'w') {
        document.getElementById('white-clock').classList.add('active');
    } else {
        document.getElementById('black-clock').classList.add('active');
    }
}

/**
 * D·ª´ng ƒë·ªìng h·ªì.
 */
function stopTimer() {
    if (timerInterval) clearInterval(timerInterval);
    timerInterval = null;
    document.getElementById('white-clock').classList.remove('active', 'low-time');
    document.getElementById('black-clock').classList.remove('active', 'low-time');
}

/**
 * X·ª≠ l√Ω khi h·∫øt gi·ªù.
 * @param {string} timedOutColor M√†u qu√¢n c·ªù h·∫øt gi·ªù ('w' ho·∫∑c 'b').
 */
function handleTimeout(timedOutColor) {
    stopTimer();
    const winnerColor = timedOutColor === 'w' ? 'ƒêen' : 'Tr·∫Øng';
    addMessageToChat('Bot', `Game Over! ${timedOutColor === 'w' ? 'Tr·∫Øng' : 'ƒêen'} h·∫øt gi·ªù. ${winnerColor} th·∫Øng.`);
    // T·∫Øt t∆∞∆°ng t√°c b√†n c·ªù
    game = null; 
}


/**
 * C·∫≠p nh·∫≠t hi·ªÉn th·ªã l∆∞·ª£t ƒëi tr√™n giao di·ªán.
 */
function switchTurnDisplay(turn) {
    const turnDisplay = document.querySelector('#current-turn-display strong span');
    if (!turnDisplay) return;

    if (turn === 'w') {
        turnDisplay.textContent = 'Tr·∫Øng';
        turnDisplay.className = 'turn-color white-turn';
    } else {
        turnDisplay.textContent = 'ƒêen';
        turnDisplay.className = 'turn-color black-turn';
    }
}


// --- 1. FUNCTION: SCREEN MANAGEMENT ---
function showScreen(screenName) {
    const screenId = screenName + '-screen'; 
    
    // üö® S·ª¨A L·ªñI: Ch·ªâ hi·ªÉn th·ªã m·ªôt m√†n h√¨nh duy nh·∫•t
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
    
    // N·∫øu chuy·ªÉn sang m√†n h√¨nh ch∆°i c·ªù
    if (screenName === 'play') {
        // T√°i kh·ªüi t·∫°o b√†n c·ªù (s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán trong startBotMatch)
        if (game) { 
            initializeChessboard(); 
            attachChatHandlers();
        }
    } else {
        // N·∫øu tho√°t m√†n h√¨nh ch∆°i c·ªù, d·ª´ng ƒë·ªìng h·ªì
        stopTimer();
    }
}

// --- 2. FUNCTION: MODAL MANAGEMENT ---
function openBotSelection() {
    document.getElementById('modal-overlay').classList.add('visible');
}

function closeBotSelection() {
    document.getElementById('modal-overlay').classList.remove('visible');
}

document.addEventListener('DOMContentLoaded', () => {
    // Logic ch·ªçn Level
    const levelSelection = document.getElementById('level-selection');
    if (levelSelection) {
        levelSelection.addEventListener('click', function(e) {
            if (e.target.classList.contains('level-btn')) {
                document.querySelectorAll('.level-btn').forEach(btn => btn.classList.remove('active'));
                e.target.classList.add('active');
                selectedBotLevel = parseInt(e.target.dataset.level);
            }
        });
    }

    // Logic ch·ªçn Color (V·∫´n gi·ªØ nguy√™n ch·ªØ data-color ƒë·ªÉ logic JS kh√¥ng b·ªã ·∫£nh h∆∞·ªüng)
    const colorSelection = document.getElementById('color-selection');
    if (colorSelection) {
        colorSelection.addEventListener('click', function(e) {
            if (e.target.classList.contains('color-btn')) {
                document.querySelectorAll('.color-btn').forEach(btn => btn.classList.remove('active'));
                e.target.classList.add('active');
                selectedBotColor = e.target.dataset.color;
            }
        });
    }
    
    // Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh khi t·∫£i trang
    const defaultLevel = document.querySelector('.level-btn[data-level="1"]');
    if (defaultLevel) defaultLevel.classList.add('active');
    const defaultColor = document.querySelector('.color-btn[data-color="Tr·∫Øng"]');
    if (defaultColor) defaultColor.classList.add('active');
});


function startBotMatch() {
    // üö® S·ª¨A L·ªñI QUAN TR·ªåNG: ƒê·∫£m b·∫£o game ƒë∆∞·ª£c kh·ªüi t·∫°o l·∫°i ·ªü ƒë√¢y
    game = new Chess(); 
    
    // 1. ·∫®n Modal
    closeBotSelection();
    
    // 2. Thi·∫øt l·∫≠p th√¥ng tin tr·∫≠n ƒë·∫•u
    whiteTime = INITIAL_TIME_SECONDS;
    blackTime = INITIAL_TIME_SECONDS;
    document.getElementById('white-time').textContent = formatTime(whiteTime);
    document.getElementById('black-time').textContent = formatTime(blackTime);
    document.getElementById('white-clock').classList.remove('low-time');
    document.getElementById('black-clock').classList.remove('low-time');
    
    const botNameInput = document.getElementById('bot-name').value.trim();
    const botName = botNameInput || `Bot Level ${selectedBotLevel}`; 
    
    const userColor = selectedBotColor; 
    const userColorChar = userColor === "Tr·∫Øng" ? "w" : "b";
    const botOppositeColor = selectedBotColor === "Tr·∫Øng" ? "ƒêen" : "Tr·∫Øng";
    
    document.querySelector('#play-screen .game-header h2').textContent = 
        `B·∫°n (${userColor}) vs ${botName} (C·∫•p ƒë·ªô ${selectedBotLevel}) (${botOppositeColor})`;

    // X√≥a chat c≈© v√† g·ª≠i tin nh·∫Øn ch√†o m·ª´ng
    const chatRoom = document.querySelector('.chat-room');
    if (chatRoom) {
        chatRoom.querySelectorAll('p').forEach(p => {
             if (p.parentNode === chatRoom) p.remove();
        }); 
    }
    addMessageToChat(botName, `Ch√†o m·ª´ng ${userColor === 'Tr·∫Øng' ? 'b·∫°n, ng∆∞·ªùi ch∆°i Tr·∫Øng' : 'ng∆∞·ªùi ch∆°i ƒêen'}. T√¥i l√† ${botName}, ch√∫c b·∫°n m·ªôt tr·∫≠n ƒë·∫•u hay!`);

    // 3. Hi·ªÉn th·ªã m√†n h√¨nh ch∆°i v√† kh·ªüi t·∫°o b√†n c·ªù
    showScreen('play'); 
    // initializeChessboard() ƒë∆∞·ª£c g·ªçi trong showScreen('play'), nh∆∞ng ta g·ªçi l·∫°i ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o
    initializeChessboard(); 
    
    // 4. B·∫Øt ƒë·∫ßu game v√† logic l∆∞·ª£t ƒëi
    switchTurnDisplay(game.turn());
    startTimer(); 

    // 5. N·∫øu ng∆∞·ªùi ch∆°i ch·ªçn ƒêen (Bot l√† Tr·∫Øng), Bot ƒëi tr∆∞·ªõc
    if (userColorChar !== game.turn()) {
        setTimeout(makeBotMove, 1000); 
    }
}

// --- 3. FUNCTION: CHESSBOARD INITIALIZATION & RENDERING ---
function initializeChessboard() {
    const chessboard = document.getElementById('chessboard');
    if (!chessboard || !game) return; 
    
    const flipBoard = selectedBotColor === 'ƒêen'; 
    if (flipBoard) {
        chessboard.classList.add('board-flipped');
    } else {
        chessboard.classList.remove('board-flipped');
    }
    
    createBoardStructure();
    positionPieces(game.board().flat());
    checkGameStatus();
}

/**
 * Ch·ªâ t·∫°o c·∫•u tr√∫c 64 √¥ c·ªù r·ªóng.
 */
function createBoardStructure() {
    const chessboard = document.getElementById('chessboard');
    chessboard.innerHTML = '';
    
    for (let i = 0; i < 64; i++) {
        const square = document.createElement('div');
        square.classList.add('square');
        
        const row = Math.floor(i / 8);
        const col = i % 8;
        const squareName = indexToSquare(i);
        
        square.dataset.square = squareName; 
        
        if ((row + col) % 2 === 0) {
            square.classList.add('light');
        } else {
            square.classList.add('dark');
        }
        
        square.addEventListener('click', handleSquareClick);
        chessboard.appendChild(square);
    }
}

/**
 * ƒê·∫∑t qu√¢n c·ªù v√†o c√°c √¥ t∆∞∆°ng ·ª©ng V√Ä √°p d·ª•ng hi·ªáu ·ª©ng glow.
 */
function positionPieces(boardState) {
    if (!game) return; 
    const pieceSymbols = { 'k': '‚ôî', 'q': '‚ôï', 'r': '‚ôñ', 'b': '‚ôó', 'n': '‚ôò', 'p': '‚ôô' };
    
    // T√¨m √¥ Vua ƒëang b·ªã chi·∫øu (n·∫øu c√≥)
    let checkedKingSquare = null;
    if (game.in_check() && !game.in_checkmate()) {
        checkedKingSquare = game.king_square(game.turn()); 
    }
    
    document.querySelectorAll('.square').forEach(squareElement => {
        const squareName = squareElement.dataset.square;
        const index = squareToIndex(squareName);
        // L·∫•y d·ªØ li·ªáu qu√¢n c·ªù t·ª´ Chess.js
        const pieceData = game.get(squareName); 
        
        // X√≥a qu√¢n c·ªù c≈© v√† hi·ªáu ·ª©ng glow
        squareElement.innerHTML = ''; 
        squareElement.classList.remove('king-in-check');

        if (pieceData) {
            const isWhite = pieceData.color === 'w';
            const pieceUnicode = pieceSymbols[pieceData.type.toLowerCase()];
            
            const pieceSpan = document.createElement('span');
            pieceSpan.textContent = pieceUnicode;
            pieceSpan.classList.add(isWhite ? 'piece-white' : 'piece-black');
            pieceSpan.dataset.piece = pieceData.color + pieceData.type; 
            
            squareElement.appendChild(pieceSpan);

            // √Åp d·ª•ng glow
            if (checkedKingSquare && squareName === checkedKingSquare) {
                squareElement.classList.add('king-in-check');
            }
        }
    });
}

/**
 * Th·ª±c hi·ªán animation di chuy·ªÉn qu√¢n c·ªù.
 */
function animateMove(fromSquare, toSquare, move) {
    if (!game) return;
    
    const fromElement = document.querySelector(`[data-square="${fromSquare}"]`);
    const toElement = document.querySelector(`[data-square="${toSquare}"]`);
    const pieceElement = fromElement.querySelector('span');

    if (!pieceElement) return;

    stopTimer(); // T·∫°m d·ª´ng ƒë·ªìng h·ªì ngay l·∫≠p t·ª©c khi di chuy·ªÉn b·∫Øt ƒë·∫ßu
    
    // --- B∆Ø·ªöC 1: T√çNH TO√ÅN V√Ä TH·ª∞C HI·ªÜN D·ªäCH CHUY·ªÇN TRONG CSS ---
    
    const fromIndex = squareToIndex(fromSquare);
    const toIndex = squareToIndex(toSquare);
    const fromRow = Math.floor(fromIndex / 8);
    const fromCol = fromIndex % 8;
    const toRow = Math.floor(toIndex / 8);
    const toCol = toIndex % 8;
    const isFlipped = document.getElementById('chessboard').classList.contains('board-flipped');
    
    let dx, dy;
    if (isFlipped) {
        dx = (fromCol - toCol) * SQUARE_SIZE;
        dy = (fromRow - toRow) * SQUARE_SIZE;
    } else {
        dx = (toCol - fromCol) * SQUARE_SIZE;
        dy = (toRow - fromRow) * SQUARE_SIZE;
    }
    
    // ƒê·∫£m b·∫£o √¥ c·ªù ƒë√≠ch tr·ªëng tr∆∞·ªõc khi animation b·∫Øt ƒë·∫ßu
    toElement.innerHTML = ''; 
    
    pieceElement.style.transform = `translate(${dx}px, ${dy}px)`;
    pieceElement.style.zIndex = 100; 

    // --- B∆Ø·ªöC 2: CH·ªú ANIMATION K·∫æT TH√öC V√Ä C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI CU·ªêI ---
    
    pieceElement.addEventListener('transitionend', function handler() {
        
        pieceElement.removeEventListener('transitionend', handler);
        
        // üö® S·ª¨A: Th·ª±c hi·ªán n∆∞·ªõc ƒëi th·ª±c t·∫ø
        // Ph·∫£i ƒë·∫£m b·∫£o move l√† ƒë·ªëi t∆∞·ª£ng c√≥ ƒë·ªß from, to, promotion
        const actualMove = game.move({ 
            from: move.from, 
            to: move.to, 
            promotion: move.promotion || 'q' 
        });

        if (actualMove) {
            
            const moveNotation = actualMove.san;
            const player = actualMove.color === 'w' ? 'Tr·∫Øng' : 'ƒêen'; 
            addMessageToChat(player, `N∆∞·ªõc ƒëi: ${moveNotation}`); 
            
            // C·∫≠p nh·∫≠t v·ªã tr√≠ qu√¢n c·ªù tr√™n b√†n c·ªù
            positionPieces(game.board().flat()); 
            
            // X√≥a hi·ªáu ·ª©ng highlight
            document.querySelectorAll('.square.highlight-move, .square.selected').forEach(sq => {
                sq.classList.remove('highlight-move', 'selected');
            });

            // C·∫≠p nh·∫≠t l∆∞·ª£t ƒëi v√† ki·ªÉm tra tr·∫°ng th√°i game
            checkGameStatus();
            
            if (!game.game_over()) {
                switchTurnDisplay(game.turn());
                startTimer(); // Kh·ªüi ƒë·ªông ƒë·ªìng h·ªì cho l∆∞·ª£t m·ªõi
            } else {
                stopTimer();
            }

            // Kh·ªüi ƒë·ªông l∆∞·ª£t ƒëi Bot (n·∫øu c·∫ßn)
            const userColorChar = selectedBotColor === 'Tr·∫Øng' ? 'w' : 'b';
            if (!game.game_over() && game.turn() !== userColorChar) {
                setTimeout(makeBotMove, 500); 
            }
        }
        
    });
}


// --- 4. FUNCTION: INTERACTION HANDLER (X·ª≠ l√Ω Click) ---

function handleSquareClick(event) {
    if (!game || game.game_over()) return;

    const clickedSquare = event.currentTarget.dataset.square;
    const playerColorChar = selectedBotColor === 'Tr·∫Øng' ? 'w' : 'b';
    const isPlayerTurn = game.turn() === playerColorChar;
    
    if (!isPlayerTurn) {
        return; 
    }

    document.querySelectorAll('.square.highlight-move, .square.selected').forEach(sq => {
        sq.classList.remove('highlight-move', 'selected');
    });

    if (selectedSquare) {
        if (selectedSquare === clickedSquare) {
            // H·ªßy ch·ªçn
            selectedSquare = null;
            return;
        }

        const validMoves = game.moves({ square: selectedSquare, verbose: true });
        const targetMove = validMoves.find(m => m.to === clickedSquare);

        if (targetMove) {
            // N∆∞·ªõc ƒëi h·ª£p l·ªá, th·ª±c hi·ªán animation
            tryMove(selectedSquare, clickedSquare, targetMove);
        } else {
            // Click v√†o √¥ kh√¥ng h·ª£p l·ªá, ho·∫∑c ch·ªçn qu√¢n kh√°c
            const piece = game.get(clickedSquare);
            if (piece && piece.color === playerColorChar) {
                selectedSquare = clickedSquare;
                event.currentTarget.classList.add('selected');
                highlightValidMoves(selectedSquare);
            } else {
                console.log("N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá.");
            }
        }
        
        selectedSquare = null; 
        
    } else {
        const piece = game.get(clickedSquare);

        if (piece && piece.color === playerColorChar) {
            selectedSquare = clickedSquare;
            event.currentTarget.classList.add('selected');
            highlightValidMoves(selectedSquare);
        } else {
            selectedSquare = null;
        }
    }
}

function highlightValidMoves(square) {
    const validMoves = game.moves({ square: square, verbose: true });
    
    document.querySelector(`[data-square="${square}"]`).classList.add('selected');

    validMoves.forEach(move => {
        const targetSquareElement = document.querySelector(`[data-square="${move.to}"]`);
        if (targetSquareElement) {
            targetSquareElement.classList.add('highlight-move');
        }
    });
}

function tryMove(fromSquare, toSquare, move) {
    // Ch·ªâ c·∫ßn g·ªçi animateMove v·ªõi ƒë·ªëi t∆∞·ª£ng move ƒë·∫ßy ƒë·ªß
    animateMove(fromSquare, toSquare, move); 
}


// --- 5. FUNCTION: GAME LOGIC & BOT (C√ì M√î PH·ªéNG LEVEL) ---

function checkGameStatus() {
    if (!game) return;
    
    // 1. X√≥a t·∫•t c·∫£ hi·ªáu ·ª©ng glow ƒë·ªè tr∆∞·ªõc khi ki·ªÉm tra tr·∫°ng th√°i m·ªõi
    document.querySelectorAll('.square.king-in-check').forEach(sq => {
        sq.classList.remove('king-in-check');
    });

    // 2. Ki·ªÉm tra tr·∫°ng th√°i game
    if (game.in_checkmate()) {
        stopTimer();
        const winner = game.turn() === 'w' ? 'ƒêen' : 'Tr·∫Øng';
        addMessageToChat('Bot', `Game Over! ${winner} th·∫Øng b·∫±ng Chi·∫øu h·∫øt.`);
        highlightCheckState();
    } else if (game.in_draw()) {
        stopTimer();
        addMessageToChat('Bot', `Game Over! H√≤a c·ªù.`);
    } else if (game.in_check()) {
        highlightCheckState();
        addMessageToChat('Bot', `${game.turn() === 'w' ? 'Tr·∫Øng' : 'ƒêen'} ƒëang b·ªã chi·∫øu!`);
    }
}

/**
 * H√†m h·ªó tr·ª£ ƒë·ªÉ √°p d·ª•ng hi·ªáu ·ª©ng glow cho Vua b·ªã chi·∫øu
 */
function highlightCheckState() {
     if (game.in_check()) {
         const checkedKingSquare = game.king_square(game.turn()); 
         const kingElement = document.querySelector(`[data-square="${checkedKingSquare}"]`);
         if (kingElement) {
             kingElement.classList.add('king-in-check'); 
         }
     }
}


function makeBotMove() {
    if (!game || game.game_over()) return;
    
    const possibleMoves = game.moves({ verbose: true });

    if (possibleMoves.length === 0) {
        checkGameStatus();
        return; 
    }
    
    // T√≠nh to√°n ƒë·ªô tr·ªÖ d·ª±a tr√™n c·∫•p ƒë·ªô
    const maxDelay = 3500;
    const minDelay = 500;
    const delay = maxDelay - (selectedBotLevel - 1) * ((maxDelay - minDelay) / 9);

    setTimeout(() => {
        
        let move = null;
        
        // --- M√î PH·ªéNG AI ƒê∆†N GI·∫¢N ---
        if (selectedBotLevel <= 3) {
            move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
        } else if (selectedBotLevel <= 7) {
            const captureMoves = possibleMoves.filter(m => m.captured);
            if (captureMoves.length > 0 && Math.random() < 0.6) { 
                move = captureMoves[Math.floor(Math.random() * captureMoves.length)];
            } else {
                move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
            }
        } else {
             const checkMoves = possibleMoves.filter(m => m.san.includes('+'));
            if (checkMoves.length > 0 && Math.random() < 0.75) { 
                move = checkMoves[Math.floor(Math.random() * checkMoves.length)];
            } else {
                move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
            }
        }
        
        // Th·ª±c hi·ªán animation v·ªõi ƒë·ªëi t∆∞·ª£ng move ƒë√£ t√¨m ƒë∆∞·ª£c
        animateMove(move.from, move.to, move); 
        
    }, delay);
}


// --- 6. FUNCTION: CHAT BOT LOGIC ---

function addMessageToChat(sender, message) {
    const chatRoom = document.querySelector('.chat-room');
    if (!chatRoom) return;
    
    const newMsg = document.createElement('p');
    const senderColorClass = sender.toLowerCase().includes('bot') ? 'bot-message' : ''; 
    newMsg.innerHTML = `<strong class="${senderColorClass}">${sender}:</strong> ${message}`;
    
    const inputArea = chatRoom.querySelector('.chat-input-area');
    if (inputArea) {
        chatRoom.insertBefore(newMsg, inputArea);
    } else {
        chatRoom.appendChild(newMsg);
    }
    
    chatRoom.scrollTop = chatRoom.scrollHeight;
}

function botResponse(userMessage, botName, botLevel) {
    const delay = Math.random() * 1500 + 500; 

    setTimeout(() => {
        let response = "";
        const msgLower = userMessage.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, ""); 

        if (msgLower.includes("thua") || msgLower.includes("bo cuoc")) {
            response = "B·∫°n v·∫´n c√≤n c∆° h·ªôi! N·∫øu b·∫°n ƒë√£ h·∫øt hy v·ªçng, t√¥i ch·∫•p nh·∫≠n chi·∫øn th·∫Øng n√†y. GG!";
        } else if (msgLower.includes("cam on") || msgLower.includes("good game") || msgLower.includes("gg")) {
            response = "C·∫£m ∆°n b·∫°n! T√¥i lu√¥n c·ªë g·∫Øng h·∫øt s·ª©c. Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh.";
        } else if (msgLower.includes("cap do") || msgLower.includes("level")) {
            response = `T√¥i ƒëang ch∆°i ·ªü c·∫•p ƒë·ªô ${botLevel}. B·∫°n th·∫•y n∆∞·ªõc c·ªù c·ªßa t√¥i th·∫ø n√†o?`;
        } else if (msgLower.includes("chao") || msgLower.includes("hello")) {
            response = "Ch√†o b·∫°n! Tr·∫≠n ƒë·∫•u th·∫ø n√†o r·ªìi? B·∫°n c√≥ ƒëang g·∫∑p kh√≥ khƒÉn kh√¥ng?";
        } else if (msgLower.includes("nuoc di hay")) {
            response = "T√¥i lu√¥n ph√¢n t√≠ch c·∫©n th·∫≠n. B·∫°n c√≥ th·∫•y n∆∞·ªõc ƒëi v·ª´a r·ªìi l√† t·ªëi ∆∞u kh√¥ng?";
        } else if (msgLower.includes("tai sao") || msgLower.includes("giai thich")) {
            response = "R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ gi·∫£i th√≠ch chi ti·∫øt n∆∞·ªõc ƒëi c·ªßa m√¨nh ngay l√∫c n√†y. H√£y t·∫≠p trung v√†o tr·∫≠n ƒë·∫•u nh√©!";
        }

        if (response === "") {
             if (game && game.in_check()) {
                 const turn = game.turn() === 'w' ? 'Tr·∫Øng' : 'ƒêen';
                 response = `√îi kh√¥ng! ${turn} ƒëang b·ªã chi·∫øu! ƒê√¢y l√† m·ªôt kho·∫£nh kh·∫Øc gay c·∫•n.`;
             } else if (game && game.history().length > 10) {
                 const opponentColor = selectedBotColor === 'Tr·∫Øng' ? 'ƒêen' : 'Tr·∫Øng';
                 response = `V√°n c·ªù ƒëang ƒëi v√†o trung cu·ªôc. ${opponentColor} c√≥ th·ªÉ s·∫Ω ƒë·ªëi m·∫∑t v·ªõi m·ªôt ƒë√≤n t·∫•n c√¥ng b·∫•t ng·ªù!`;
             } else {
                 const generalResponses = [
                    "T√¥i ƒëang ph√¢n t√≠ch b√†n c·ªù, th·∫≠t th√∫ v·ªã!",
                    "B·∫°n c√≥ v·∫ª ƒëang t·∫≠p trung cao ƒë·ªô. N∆∞·ªõc ƒëi ti·∫øp theo c·ªßa b·∫°n l√† g√¨?",
                    "√Ä h√°! T√¥i ƒë√£ t√¨m th·∫•y m·ªôt n∆∞·ªõc ƒëi m·∫°nh m·∫Ω. H√£y xem x√©t c·∫©n th·∫≠n nh√©.",
                    "T√¥i ƒë√£ s·∫µn s√†ng cho n∆∞·ªõc ƒëi ti·∫øp theo c·ªßa b·∫°n. ƒê·ª´ng lo l·∫Øng v·ªÅ th·ªùi gian!",
                ];
                response = generalResponses[Math.floor(Math.random() * generalResponses.length)];
             }
        }
        
        addMessageToChat(botName, response);
    }, delay);
}

function handleSendMessage(inputElement) {
    const message = inputElement.value.trim();
    if (message === "") return;

    addMessageToChat('B·∫°n', message); 
    inputElement.value = '';

    const headerText = document.querySelector('#play-screen .game-header h2').textContent;
    const botNameMatch = headerText.match(/vs (.*?) \(C·∫•p ƒë·ªô/); 
    const botName = botNameMatch ? botNameMatch[1].trim() : `Bot C·∫•p ƒë·ªô ${selectedBotLevel}`;
    
    botResponse(message, botName, selectedBotLevel);
}

function attachChatHandlers() {
    const sendButton = document.querySelector('#play-screen .chat-input-area .send-btn');
    const chatInput = document.querySelector('#play-screen .chat-input-area input');

    if (sendButton) {
        // Lo·∫°i b·ªè handler c≈© ƒë·ªÉ tr√°nh nh√¢n ƒë√¥i
        sendButton.onclick = null; 
        sendButton.addEventListener('click', () => handleSendMessage(chatInput), { once: true });
    }
    
    if (chatInput) {
        // Lo·∫°i b·ªè handler c≈© ƒë·ªÉ tr√°nh nh√¢n ƒë√¥i
        chatInput.onkeypress = null; 
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleSendMessage(chatInput);
            }
        });
    }
}

// --- 7. LANGUAGE TRANSLATION FUNCTION (Kh√¥ng ƒë·ªïi) ---
/**
 * D·ªãch trang b·∫±ng c√°ch ƒë·∫∑t cookie v√† sau ƒë√≥ can thi·ªáp ƒë·ªÉ k√≠ch ho·∫°t d·ªãch thu·∫≠t ngay l·∫≠p t·ª©c,
 * tr√°nh vi·ªác t·∫£i l·∫°i trang g√¢y l·ªói "Can't translate".
 * @param {string} targetLang M√£ ng√¥n ng·ªØ m·ª•c ti√™u (v√≠ d·ª•: 'en', 'es', 'vi').
 */
function translatePage(targetLang) {
    if (typeof google === 'undefined' || typeof google.translate === 'undefined') {
        alert("Th∆∞ vi·ªán Google D·ªãch ch∆∞a t·∫£i xong. Vui l√≤ng th·ª≠ l·∫°i.");
        return;
    }

    // 1. ƒê·∫∑t Cookie "googtrans"
    const expiryDate = new Date();
    expiryDate.setTime(expiryDate.getTime() + (24 * 60 * 60 * 1000));
    const expiryString = expiryDate.toUTCString();
    const cookieValue = `/vi/${targetLang}`; 
    document.cookie = `googtrans=${cookieValue}; expires=${expiryString}; path=/`;

    // 2. X√≥a cookie n·∫øu l√† Ti·∫øng Vi·ªát
    if (targetLang === 'vi') {
        document.cookie = 'googtrans=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
    }
    
    // 3. CAN THI·ªÜP: B·∫ÆT GOOGLE D·ªäCH TH·ª∞C HI·ªÜN NGAY L·∫¨P T·ª®C ho·∫∑c t·∫£i l·∫°i
    try {
        if (targetLang === 'vi') {
             // N·∫øu l√† ti·∫øng Vi·ªát (g·ªëc), t·∫£i l·∫°i trang sau khi x√≥a cookie
             window.location.reload(); 
        } else {
             // ƒê·ªëi v·ªõi c√°c ng√¥n ng·ªØ kh√°c, c·ªë g·∫Øng g·ªçi API d·ªãch m√† kh√¥ng t·∫£i l·∫°i
             const langPair = 'vi|' + targetLang;
             const translator = google.translate.TranslateElement.get(document.getElementById('google_translate_element').id);
             
             if (translator) {
                 translator.translatePage(langPair);
             } else {
                 // N·∫øu kh√¥ng t√¨m th·∫•y translator (do widget ƒë√£ b·ªã ·∫©n), fallback b·∫±ng c√°ch t·∫£i l·∫°i
                 window.location.reload(); 
             }
        }
    } catch (e) {
        // N·∫øu c√≥ l·ªói, fallback b·∫±ng c√°ch t·∫£i l·∫°i
        console.error("L·ªói khi g·ªçi API d·ªãch thu·∫≠t tr·ª±c ti·∫øp:", e);
        window.location.reload();
    }
}


// --- 8. INITIALIZATION ---
document.addEventListener('DOMContentLoaded', (event) => {
    // üö® S·ª¨A: ƒê·∫£m b·∫£o game ƒë∆∞·ª£c kh·ªüi t·∫°o ngay l√∫c ƒë·∫ßu ƒë·ªÉ tr√°nh l·ªói null
    game = new Chess();
    // B·∫Øt ƒë·∫ßu b·∫±ng m√†n h√¨nh Home
    showScreen('home');

    const playWithBotsBtn = document.querySelector('.battle-actions button:nth-child(2)');
    if (playWithBotsBtn) {
        playWithBotsBtn.addEventListener('click', openBotSelection);
    }
});
