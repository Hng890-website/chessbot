// script.js

// --- GLOBAL VARIABLES ---
let selectedBotLevel = 1;
let selectedBotColor = "Tr·∫Øng"; // M·∫∑c ƒë·ªãnh l√† Tr·∫Øng
let game = null; // Bi·∫øn l∆∞u tr·ªØ tr·∫°ng th√°i game t·ª´ th∆∞ vi·ªán Chess.js
let selectedSquare = null; // Bi·∫øn l∆∞u tr·ªØ √¥ c·ªù ƒëang ƒë∆∞·ª£c ch·ªçn
const SQUARE_SIZE = 60; // K√≠ch th∆∞·ªõc m·ªói √¥ c·ªù (ph·∫£i kh·ªõp v·ªõi CSS)

// --- UTILITY FUNCTIONS ---

/**
 * Chuy·ªÉn ƒë·ªïi ch·ªâ m·ª•c m·∫£ng (0-63) th√†nh t·ªça ƒë·ªô c·ªù vua (a1-h8).
 * @param {number} index Ch·ªâ m·ª•c t·ª´ 0 ƒë·∫øn 63.
 * @returns {string} T·ªça ƒë·ªô c·ªù vua.
 */
function indexToSquare(index) {
    const file = String.fromCharCode('a'.charCodeAt(0) + (index % 8));
    const rank = 8 - Math.floor(index / 8);
    return file + rank;
}

/**
 * Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô c·ªù vua (a1-h8) th√†nh ch·ªâ m·ª•c m·∫£ng (0-63).
 * @param {string} square T·ªça ƒë·ªô c·ªù vua.
 * @returns {number} Ch·ªâ m·ª•c m·∫£ng.
 */
function squareToIndex(square) {
    const file = square.charCodeAt(0) - 'a'.charCodeAt(0);
    const rank = 8 - parseInt(square[1]);
    return rank * 8 + file;
}

// --- 1. FUNCTION: SCREEN MANAGEMENT ---
function showScreen(screenName) {
    const screenId = screenName + '-screen'; 
    
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }

    if (screenName === 'play') {
        const chessboard = document.getElementById('chessboard');
        if (chessboard) {
             chessboard.innerHTML = '';
             chessboard.classList.remove('board-flipped'); 
        }
        // Kh·ªüi t·∫°o tr·∫°ng th√°i game m·ªõi
        game = new Chess(); 
        initializeChessboard();
        attachChatHandlers();
    }
}

// --- 2. FUNCTION: MODAL MANAGEMENT (X·ª≠ l√Ω Pop-up) ---
function openBotSelection() {
    document.getElementById('modal-overlay').classList.add('visible');
}

function closeBotSelection() {
    document.getElementById('modal-overlay').classList.remove('visible');
}

document.addEventListener('DOMContentLoaded', () => {
    const levelSelection = document.getElementById('level-selection');
    if (levelSelection) {
        levelSelection.addEventListener('click', function(e) {
            if (e.target.classList.contains('level-btn')) {
                document.querySelectorAll('.level-btn').forEach(btn => btn.classList.remove('active'));
                e.target.classList.add('active');
                selectedBotLevel = parseInt(e.target.dataset.level);
            }
        });
    }

    const colorSelection = document.getElementById('color-selection');
    if (colorSelection) {
        colorSelection.addEventListener('click', function(e) {
            if (e.target.classList.contains('color-btn')) {
                document.querySelectorAll('.color-btn').forEach(btn => btn.classList.remove('active'));
                e.target.classList.add('active');
                selectedBotColor = e.target.dataset.color;
            }
        });
    }
    
    // ƒê·∫£m b·∫£o Level 1 v√† Tr·∫Øng lu√¥n ƒë∆∞·ª£c ch·ªçn m·∫∑c ƒë·ªãnh khi load trang
    const defaultLevel = document.querySelector('.level-btn[data-level="1"]');
    if (defaultLevel) defaultLevel.classList.add('active');
    const defaultColor = document.querySelector('.color-btn[data-color="Tr·∫Øng"]');
    if (defaultColor) defaultColor.classList.add('active');
});


function startBotMatch() {
    const botNameInput = document.getElementById('bot-name').value.trim();
    const botName = botNameInput || `Bot Level ${selectedBotLevel}`; 
    
    closeBotSelection();
    showScreen('play');
    
    const userColor = selectedBotColor; 
    const botOppositeColor = selectedBotColor === "Tr·∫Øng" ? "ƒêen" : "Tr·∫Øng";
    
    document.querySelector('#play-screen .game-header h2').textContent = 
        `You (${userColor}) vs ${botName} (Level ${selectedBotLevel}) (${botOppositeColor})`;

    const chatRoom = document.querySelector('.chat-room');
    if (chatRoom) {
        // X√≥a tin nh·∫Øn c≈©
        chatRoom.querySelectorAll('p').forEach(p => {
             if (p.parentNode === chatRoom) p.remove();
        }); 
    }
    addMessageToChat(botName, `Ch√†o m·ª´ng ${userColor === 'Tr·∫Øng' ? 'b·∫°n, ng∆∞·ªùi ch∆°i Tr·∫Øng' : 'ng∆∞·ªùi ch∆°i ƒêen'}. T√¥i l√† ${botName}, ch√∫c b·∫°n m·ªôt tr·∫≠n ƒë·∫•u hay!`);

    // N·∫øu ng∆∞·ªùi ch∆°i ch·ªçn ƒêen (Bot l√† Tr·∫Øng), Bot ƒëi tr∆∞·ªõc
    if (userColor === 'ƒêen') {
        setTimeout(makeBotMove, 1000); 
    }
}

// --- 3. FUNCTION: CHESSBOARD INITIALIZATION & RENDERING (ƒê√É S·ª¨A CHO ANIMATION) ---
function initializeChessboard() {
    const chessboard = document.getElementById('chessboard');
    if (!chessboard || !game) return; 
    
    const flipBoard = selectedBotColor === 'ƒêen'; 
    if (flipBoard) {
        chessboard.classList.add('board-flipped');
    } else {
        chessboard.classList.remove('board-flipped');
    }
    
    // T·∫†O C·∫§U TR√öC 64 √î C·ªú L·∫¶N ƒê·∫¶U
    createBoardStructure();
    
    // ƒê·∫∂T QU√ÇN C·ªú L·∫¶N ƒê·∫¶U
    positionPieces(game.board().flat());
}

/**
 * Ch·ªâ t·∫°o c·∫•u tr√∫c 64 √¥ c·ªù r·ªóng.
 */
function createBoardStructure() {
    const chessboard = document.getElementById('chessboard');
    chessboard.innerHTML = '';
    
    for (let i = 0; i < 64; i++) {
        const square = document.createElement('div');
        square.classList.add('square');
        
        const row = Math.floor(i / 8);
        const col = i % 8;
        const squareName = indexToSquare(i);
        
        square.dataset.square = squareName; 
        
        if ((row + col) % 2 === 0) {
            square.classList.add('light');
        } else {
            square.classList.add('dark');
        }
        
        square.addEventListener('click', handleSquareClick);
        chessboard.appendChild(square);
    }
}

/**
 * ƒê·∫∑t qu√¢n c·ªù v√†o c√°c √¥ t∆∞∆°ng ·ª©ng. D√πng cho render l·∫ßn ƒë·∫ßu v√† c·∫≠p nh·∫≠t sau khi animation k·∫øt th√∫c.
 */
function positionPieces(boardState) {
    const pieceSymbols = { 'k': '‚ôî', 'q': '‚ôï', 'r': '‚ôñ', 'b': '‚ôó', 'n': '‚ôò', 'p': '‚ôô' };
    
    document.querySelectorAll('.square').forEach(squareElement => {
        const squareName = squareElement.dataset.square;
        const index = squareToIndex(squareName);
        const pieceData = boardState[index];
        
        // X√≥a qu√¢n c·ªù c≈©
        squareElement.innerHTML = ''; 

        if (pieceData) {
            const isWhite = pieceData.color === 'w';
            const pieceUnicode = pieceSymbols[pieceData.type.toLowerCase()];
            
            const pieceSpan = document.createElement('span');
            pieceSpan.textContent = pieceUnicode;
            pieceSpan.classList.add(isWhite ? 'piece-white' : 'piece-black');
            pieceSpan.dataset.piece = pieceData.color + pieceData.type; // Th√™m data ƒë·ªÉ d·ªÖ d√†ng nh·∫≠n d·∫°ng
            
            squareElement.appendChild(pieceSpan);
        }
    });
}

/**
 * H√†m m·ªõi: Th·ª±c hi·ªán animation di chuy·ªÉn qu√¢n c·ªù.
 */
function animateMove(fromSquare, toSquare, move) {
    const fromElement = document.querySelector(`[data-square="${fromSquare}"]`);
    const toElement = document.querySelector(`[data-square="${toSquare}"]`);
    const pieceElement = fromElement.querySelector('span'); // Qu√¢n c·ªù s·∫Ω di chuy·ªÉn

    if (!pieceElement) return;

    // --- X·ª¨ L√ù B·∫ÆT QU√ÇN (CAPTURE) ---
    // Lo·∫°i b·ªè qu√¢n c·ªù b·ªã b·∫Øt ·ªü √¥ ƒë√≠ch ngay l·∫≠p t·ª©c
    toElement.innerHTML = ''; 
    
    // --- B∆Ø·ªöC 1: T√çNH TO√ÅN V√Ä TH·ª∞C HI·ªÜN D·ªäCH CHUY·ªÇN TRONG CSS ---
    
    // T√≠nh to√°n v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi c·ªßa qu√¢n c·ªù
    const fromIndex = squareToIndex(fromSquare);
    const toIndex = squareToIndex(toSquare);
    
    // S·ªë √¥ d·ªãch chuy·ªÉn (h√†ng v√† c·ªôt)
    const fromRow = Math.floor(fromIndex / 8);
    const fromCol = fromIndex % 8;
    const toRow = Math.floor(toIndex / 8);
    const toCol = toIndex % 8;
    
    // ƒê·ªô l·ªách (pixels)
    // N·∫øu b√†n c·ªù kh√¥ng b·ªã l·∫≠t, t√≠nh to√°n ƒë∆°n gi·∫£n
    const isFlipped = document.getElementById('chessboard').classList.contains('board-flipped');
    
    let dx, dy;
    if (isFlipped) {
        // T·ªça ƒë·ªô ƒë√£ b·ªã xoay 180 ƒë·ªô (dx v√† dy b·ªã ƒë·∫£o d·∫•u so v·ªõi t√≠nh to√°n b√¨nh th∆∞·ªùng)
        dx = (fromCol - toCol) * SQUARE_SIZE;
        dy = (fromRow - toRow) * SQUARE_SIZE;
    } else {
        // T·ªça ƒë·ªô b√¨nh th∆∞·ªùng
        dx = (toCol - fromCol) * SQUARE_SIZE;
        dy = (toRow - fromRow) * SQUARE_SIZE;
    }

    // 1.1. Di chuy·ªÉn qu√¢n c·ªù ra kh·ªèi √¥ c≈©
    pieceElement.style.transform = `translate(${dx}px, ${dy}px)`;
    
    // ƒê·∫∑t z-index cao ƒë·ªÉ qu√¢n c·ªù di chuy·ªÉn n·∫±m tr√™n c√°c qu√¢n c·ªù kh√°c
    pieceElement.style.zIndex = 100; 

    // --- B∆Ø·ªöC 2: CH·ªú ANIMATION K·∫æT TH√öC V√Ä C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI CU·ªêI ---
    
    // L·∫Øng nghe s·ª± ki·ªán CSS transition k·∫øt th√∫c (kho·∫£ng 300ms)
    pieceElement.addEventListener('transitionend', function handler() {
        
        // X√≥a listener ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
        pieceElement.removeEventListener('transitionend', handler);

        // 2.1. C·∫≠p nh·∫≠t tr·∫°ng th√°i game (CHUY·ªÇN FEN)
        const moveResult = game.move(move);

        if (moveResult) {
            
            // üö® LOGIC M·ªöI: Ghi l·∫°i n∆∞·ªõc ƒëi v√†o Chat/Log (Bao g·ªìm O-O v√† O-O-O)
            const moveNotation = moveResult.san;
            const isWhite = moveResult.color === 'w';
            const player = isWhite ? 'Tr·∫Øng' : 'ƒêen';
            const logMessage = `N∆∞·ªõc ƒëi c·ªßa ${player}: ${moveNotation}`;
            addMessageToChat('System', logMessage); 
            
            // 2.2. D·ªçn d·∫πp v√† ƒë·∫∑t l·∫°i v·ªã tr√≠
            fromElement.innerHTML = ''; // X√≥a qu√¢n c·ªù kh·ªèi √¥ c≈©
            toElement.innerHTML = '';   // X√≥a b·∫•t k·ª≥ th·ª© g√¨ c√≥ s·∫µn trong √¥ m·ªõi
            
            // ƒê·∫∑t l·∫°i qu√¢n c·ªù (t·ª´ tr·∫°ng th√°i ƒë√£ di chuy·ªÉn) v√†o √¥ m·ªõi
            positionPieces(game.board().flat()); 

            // 2.3. Kh·ªüi ƒë·ªông l∆∞·ª£t ƒëi ti·∫øp theo
            checkGameStatus();
            if (game.turn() !== (selectedBotColor === 'Tr·∫Øng' ? 'w' : 'b')) {
                setTimeout(makeBotMove, 500); 
            }
        }
        
    });
}


// --- 4. FUNCTION: INTERACTION HANDLER (X·ª≠ l√Ω Click) ---

function handleSquareClick(event) {
    const clickedSquare = event.currentTarget.dataset.square;
    const playerColorChar = selectedBotColor === 'Tr·∫Øng' ? 'w' : 'b';
    const isPlayerTurn = game.turn() === playerColorChar;
    
    if (!isPlayerTurn) {
        console.log("Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n.");
        return; 
    }

    // X√≥a t·∫•t c·∫£ ƒë√°nh d·∫•u √¥ c·ªù tr∆∞·ªõc ƒë√≥
    document.querySelectorAll('.square.highlight-move, .square.selected').forEach(sq => {
        sq.classList.remove('highlight-move', 'selected');
    });

    if (selectedSquare) {
        // CASE 2: ƒê√£ ch·ªçn m·ªôt qu√¢n c·ªù tr∆∞·ªõc ƒë√≥
        
        // a) N·∫øu nh·∫•p l·∫°i v√†o √¥ c≈©: B·ªè ch·ªçn
        if (selectedSquare === clickedSquare) {
            selectedSquare = null;
            return;
        }

        // b) Th·ª≠ di chuy·ªÉn
        tryMove(selectedSquare, clickedSquare);
        selectedSquare = null; // Lu√¥n x√≥a selectedSquare sau khi th·ª≠ di chuy·ªÉn
        
    } else {
        // CASE 1: Ch∆∞a ch·ªçn qu√¢n c·ªù
        
        // Ch·ªâ cho ph√©p ch·ªçn qu√¢n c·ªù c·ªßa ng∆∞·ªùi ch∆°i
        const piece = game.get(clickedSquare);

        if (piece && piece.color === playerColorChar) {
            selectedSquare = clickedSquare;
            event.currentTarget.classList.add('selected');
            highlightValidMoves(selectedSquare);
        } else {
            selectedSquare = null;
        }
    }
}

function highlightValidMoves(square) {
    const validMoves = game.moves({ square: square, verbose: true });
    
    document.querySelector(`[data-square="${square}"]`).classList.add('selected');

    validMoves.forEach(move => {
        const targetSquareElement = document.querySelector(`[data-square="${move.to}"]`);
        if (targetSquareElement) {
            targetSquareElement.classList.add('highlight-move');
        }
    });
}

function tryMove(fromSquare, toSquare) {
    // 1. T·∫†O N∆Ø·ªöC ƒêI T·∫†M TH·ªúI (kh√¥ng th·ª±c hi·ªán tr√™n game object)
    // L∆∞u √Ω: promotion: 'q' l√† m·∫∑c ƒë·ªãnh cho n∆∞·ªõc phong c·∫•p, chess.js s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω.
    const tempMove = { from: fromSquare, to: toSquare, promotion: 'q' }; 
    
    // 2. KI·ªÇM TRA T√çNH H·ª¢P L·ªÜ (S·ª≠ d·ª•ng clone game ƒë·ªÉ ki·ªÉm tra)
    const testGame = new Chess(game.fen());
    const moveResult = testGame.move(tempMove);
    
    if (moveResult) {
        // N∆∞·ªõc ƒëi h·ª£p l·ªá: TH·ª∞C HI·ªÜN ANIMATION V√Ä DI CHUY·ªÇN TH·∫¨T
        // L∆∞u √Ω: animateMove s·∫Ω t·ª± ƒë·ªông g·ªçi game.move() sau khi animation ho√†n t·∫•t.
        animateMove(fromSquare, toSquare, tempMove); 
        
    } else {
        console.log("N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá.");
    }
}

// --- 5. FUNCTION: GAME LOGIC & BOT (C√ì M√î PH·ªéNG LEVEL) ---

function checkGameStatus() {
    if (game.in_checkmate()) {
        const winner = game.turn() === 'w' ? 'ƒêen' : 'Tr·∫Øng';
        addMessageToChat('System', `Game Over! ${winner} th·∫Øng b·∫±ng Chi·∫øu h·∫øt.`);
    } else if (game.in_draw()) {
        addMessageToChat('System', `Game Over! H√≤a c·ªù.`);
    } else if (game.in_check()) {
        addMessageToChat('System', `${game.turn() === 'w' ? 'Tr·∫Øng' : 'ƒêen'} ƒëang b·ªã chi·∫øu!`);
    }
}

function makeBotMove() {
    const possibleMoves = game.moves({ verbose: true });

    if (possibleMoves.length === 0) {
        checkGameStatus();
        return; 
    }
    
    // 1. D·ª±a v√†o Level ƒë·ªÉ x√°c ƒë·ªãnh ƒë·ªô tr·ªÖ c·ªßa Bot (M√¥ ph·ªèng th·ªùi gian suy nghƒ©)
    const maxDelay = 3500;
    const minDelay = 500;
    const delay = maxDelay - (selectedBotLevel - 1) * ((maxDelay - minDelay) / 9);

    setTimeout(() => {
        
        let move = null;
        
        if (selectedBotLevel <= 3) {
            // Level th·∫•p: Ch·ªçn ng·∫´u nhi√™n ho√†n to√†n
            move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
        } else if (selectedBotLevel <= 7) {
            // Level trung b√¨nh: Gi·∫£ v·ªù ∆∞u ti√™n n∆∞·ªõc ƒëi b·∫Øt qu√¢n (capture)
            const captureMoves = possibleMoves.filter(m => m.captured);
            // Ch·ªçn ng·∫´u nhi√™n trong s·ªë n∆∞·ªõc ƒëi b·∫Øt qu√¢n (n·∫øu c√≥)
            if (captureMoves.length > 0 && Math.random() < 0.6) { // 60% ∆∞u ti√™n b·∫Øt qu√¢n
                move = captureMoves[Math.floor(Math.random() * captureMoves.length)];
            } else {
                move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
            }
        } else {
            // Level cao: Gi·∫£ v·ªù ∆∞u ti√™n n∆∞·ªõc ƒëi chi·∫øu t∆∞·ªõng (check)
             const checkMoves = possibleMoves.filter(m => m.san.includes('+'));
            // Ch·ªçn ng·∫´u nhi√™n trong s·ªë n∆∞·ªõc ƒëi chi·∫øu t∆∞·ªõng (n·∫øu c√≥)
            if (checkMoves.length > 0 && Math.random() < 0.75) { // 75% ∆∞u ti√™n chi·∫øu t∆∞·ªõng
                move = checkMoves[Math.floor(Math.random() * checkMoves.length)];
            } else {
                move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
            }
        }
        
        // Th·ª±c hi·ªán n∆∞·ªõc ƒëi BOT b·∫±ng animation (gi·ªëng ng∆∞·ªùi ch∆°i)
        // move l√† m·ªôt object verbose, nh∆∞ng animateMove ch·ªâ c·∫ßn from/to/promotion
        animateMove(move.from, move.to, move); 
        
    }, delay);
}


// --- 6. FUNCTION: CHAT BOT LOGIC (M·ªû R·ªòNG) ---

function addMessageToChat(sender, message) {
    const chatRoom = document.querySelector('.chat-room');
    if (!chatRoom) return;
    
    const newMsg = document.createElement('p');
    newMsg.innerHTML = `<strong>${sender}:</strong> ${message}`;
    const inputArea = chatRoom.querySelector('.chat-input-area');
    if (inputArea) {
        // Ch√®n tin nh·∫Øn m·ªõi tr∆∞·ªõc v√πng nh·∫≠p li·ªáu
        chatRoom.insertBefore(newMsg, inputArea);
    } else {
        chatRoom.appendChild(newMsg);
    }
    
    // Cu·ªôn xu·ªëng cu·ªëi
    chatRoom.scrollTop = chatRoom.scrollHeight;
}

function botResponse(userMessage, botName, botLevel) {
    const delay = Math.random() * 1500 + 500; // Gi·∫£m ƒë·ªô tr·ªÖ chat

    setTimeout(() => {
        let response = "";
        // Chu·∫©n h√≥a ti·∫øng Vi·ªát ƒë·ªÉ ph√¢n t√≠ch t·ª´ kh√≥a (b·ªè d·∫•u)
        const msgLower = userMessage.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, ""); 

        // 1. PH√ÇN T√çCH T·ª™ KH√ìA CH√çNH
        if (msgLower.includes("thua") || msgLower.includes("bo cuoc")) {
            response = "B·∫°n v·∫´n c√≤n c∆° h·ªôi! N·∫øu b·∫°n ƒë√£ h·∫øt hy v·ªçng, t√¥i ch·∫•p nh·∫≠n chi·∫øn th·∫Øng n√†y. GG!";
        } else if (msgLower.includes("cam on") || msgLower.includes("good game") || msgLower.includes("gg")) {
            response = "C·∫£m ∆°n b·∫°n! T√¥i lu√¥n c·ªë g·∫Øng h·∫øt s·ª©c. Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh.";
        } else if (msgLower.includes("cap do") || msgLower.includes("level")) {
            response = `T√¥i ƒëang ch∆°i ·ªü c·∫•p ƒë·ªô ${botLevel}. B·∫°n th·∫•y n∆∞·ªõc c·ªù c·ªßa t√¥i th·∫ø n√†o?`;
        } else if (msgLower.includes("chao") || msgLower.includes("hello")) {
            response = "Ch√†o b·∫°n! Tr·∫≠n ƒë·∫•u th·∫ø n√†o r·ªìi? B·∫°n c√≥ ƒëang g·∫∑p kh√≥ khƒÉn kh√¥ng?";
        } else if (msgLower.includes("nuoc di hay")) {
            response = "T√¥i lu√¥n ph√¢n t√≠ch c·∫©n th·∫≠n. B·∫°n c√≥ th·∫•y n∆∞·ªõc ƒëi v·ª´a r·ªìi l√† t·ªëi ∆∞u kh√¥ng?";
        } else if (msgLower.includes("tai sao") || msgLower.includes("giai thich")) {
            response = "R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ gi·∫£i th√≠ch chi ti·∫øt n∆∞·ªõc ƒëi c·ªßa m√¨nh ngay l√∫c n√†y. H√£y t·∫≠p trung v√†o tr·∫≠n ƒë·∫•u nh√©!";
        }

        // 2. PH·∫¢N ·ª®NG D·ª∞A TR√äN TR·∫†NG TH√ÅI GAME (N·∫øu ch∆∞a c√≥ ph·∫£n h·ªìi)
        if (response === "") {
             if (game && game.in_check()) {
                 const turn = game.turn() === 'w' ? 'Tr·∫Øng' : 'ƒêen';
                 response = `√îi kh√¥ng! ${turn} ƒëang b·ªã chi·∫øu! ƒê√¢y l√† m·ªôt kho·∫£nh kh·∫Øc gay c·∫•n.`;
             } else if (game && game.history().length > 10) {
                 const opponentColor = selectedBotColor === 'Tr·∫Øng' ? 'ƒêen' : 'Tr·∫Øng';
                 response = `V√°n c·ªù ƒëang ƒëi v√†o trung cu·ªôc. ${opponentColor} c√≥ th·ªÉ s·∫Ω ƒë·ªëi m·∫∑t v·ªõi m·ªôt ƒë√≤n t·∫•n c√¥ng b·∫•t ng·ªù!`;
             } else {
                 // Ph·∫£n h·ªìi chung (Ng·∫´u nhi√™n)
                 const generalResponses = [
                    "T√¥i ƒëang ph√¢n t√≠ch b√†n c·ªù, th·∫≠t th√∫ v·ªã!",
                    "B·∫°n c√≥ v·∫ª ƒëang t·∫≠p trung cao ƒë·ªô. N∆∞·ªõc ƒëi ti·∫øp theo c·ªßa b·∫°n l√† g√¨?",
                    "√Ä h√°! T√¥i ƒë√£ t√¨m th·∫•y m·ªôt n∆∞·ªõc ƒëi m·∫°nh m·∫Ω. H√£y xem x√©t c·∫©n th·∫≠n nh√©.",
                    "T√¥i ƒë√£ s·∫µn s√†ng cho n∆∞·ªõc ƒëi ti·∫øp theo c·ªßa b·∫°n. ƒê·ª´ng lo l·∫Øng v·ªÅ th·ªùi gian!",
                ];
                response = generalResponses[Math.floor(Math.random() * generalResponses.length)];
             }
        }
        
        addMessageToChat(botName, response);
    }, delay);
}

function handleSendMessage(inputElement) {
    const message = inputElement.value.trim();
    if (message === "") return;

    addMessageToChat('You', message);
    inputElement.value = '';

    const headerText = document.querySelector('#play-screen .game-header h2').textContent;
    const botNameMatch = headerText.match(/vs (.*?) \(Level/);
    const botName = botNameMatch ? botNameMatch[1].trim() : `Bot Level ${selectedBotLevel}`;
    
    botResponse(message, botName, selectedBotLevel);
}

function attachChatHandlers() {
    const sendButton = document.querySelector('#play-screen .chat-input-area .send-btn');
    const chatInput = document.querySelector('#play-screen .chat-input-area input');

    if (sendButton) {
        // ƒê·∫£m b·∫£o kh√¥ng g·∫Øn nhi·ªÅu s·ª± ki·ªán
        sendButton.onclick = null;
        sendButton.addEventListener('click', () => handleSendMessage(chatInput));
    }
    
    if (chatInput) {
        // ƒê·∫£m b·∫£o kh√¥ng g·∫Øn nhi·ªÅu s·ª± ki·ªán
        chatInput.onkeypress = null;
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleSendMessage(chatInput);
            }
        });
    }
}

// --- 7. LANGUAGE TRANSLATION FUNCTION ---
/**
 * D·ªãch trang b·∫±ng c√°ch ƒë·∫∑t cookie v√† sau ƒë√≥ can thi·ªáp ƒë·ªÉ k√≠ch ho·∫°t d·ªãch thu·∫≠t ngay l·∫≠p t·ª©c,
 * tr√°nh vi·ªác t·∫£i l·∫°i trang g√¢y l·ªói "Can't translate".
 * @param {string} targetLang M√£ ng√¥n ng·ªØ m·ª•c ti√™u (v√≠ d·ª•: 'en', 'es', 'vi').
 */
function translatePage(targetLang) {
    if (typeof google === 'undefined' || typeof google.translate === 'undefined') {
        alert("Th∆∞ vi·ªán Google D·ªãch ch∆∞a t·∫£i xong. Vui l√≤ng th·ª≠ l·∫°i.");
        return;
    }

    // 1. ƒê·∫∑t Cookie "googtrans"
    const expiryDate = new Date();
    expiryDate.setTime(expiryDate.getTime() + (24 * 60 * 60 * 1000));
    const expiryString = expiryDate.toUTCString();
    const cookieValue = `/vi/${targetLang}`; 
    document.cookie = `googtrans=${cookieValue}; expires=${expiryString}; path=/`;

    // 2. X√≥a cookie n·∫øu l√† Ti·∫øng Vi·ªát
    if (targetLang === 'vi') {
        document.cookie = 'googtrans=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
    }
    
    // 3. CAN THI·ªÜP: B·∫ÆT GOOGLE D·ªäCH TH·ª∞C HI·ªÜN NGAY L·∫¨P T·ª®C ho·∫∑c t·∫£i l·∫°i
    try {
        if (targetLang === 'vi') {
             // N·∫øu l√† ti·∫øng Vi·ªát (g·ªëc), t·∫£i l·∫°i trang sau khi x√≥a cookie
             window.location.reload(); 
        } else {
             // ƒê·ªëi v·ªõi c√°c ng√¥n ng·ªØ kh√°c, c·ªë g·∫Øng g·ªçi API d·ªãch m√† kh√¥ng t·∫£i l·∫°i
             const langPair = 'vi|' + targetLang;
             const translator = google.translate.TranslateElement.get(document.getElementById('google_translate_element').id);
             
             if (translator) {
                 translator.translatePage(langPair);
             } else {
                 // N·∫øu kh√¥ng t√¨m th·∫•y translator (do widget ƒë√£ b·ªã ·∫©n), fallback b·∫±ng c√°ch t·∫£i l·∫°i
                 window.location.reload(); 
             }
        }
    } catch (e) {
        // N·∫øu c√≥ l·ªói, fallback b·∫±ng c√°ch t·∫£i l·∫°i
        console.error("L·ªói khi g·ªçi API d·ªãch thu·∫≠t tr·ª±c ti·∫øp:", e);
        window.location.reload();
    }
}


// --- 8. INITIALIZATION ---
document.addEventListener('DOMContentLoaded', (event) => {
    showScreen('home');

    const playWithBotsBtn = document.querySelector('.battle-actions button:nth-child(2)');
    if (playWithBotsBtn) {
        playWithBotsBtn.addEventListener('click', openBotSelection);
    }
    
    const doneButton = document.querySelector('#add-news-screen .action-btn');
    if (doneButton) {
        doneButton.addEventListener('click', () => showScreen('home'));
    }
});
